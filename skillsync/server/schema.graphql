scalar DateTime

type User {
  id: ID!
  username: String!
  password: String!
  gender: String
  email: String
  profile: UserProfile
  suc_match: Int
  invite_sent: [User]
  invite_rec: [User]
  rating: Int
  review: [Review]
  chats:[Chat]
}

type Chat {
  messages:[Message]
  participants:[User]
}

type Message {
  content: String
  timestamp: DateTime
  sender: User
  # receiver: User
}

type UserProfile {
  age: Int
  location: String
  avatar: String
  skills: [UserSkill]
  wanted_skills: [Int]
}

type UserSkill {
  skill_id: Int
  level: String
}


input SkillInput{
  name: String!
  description: String!
  proficiency: Int
  certificate: String!
  pic: String!
}

input UserProfileInput {
  age: Int
  location: String
  avatar: Upload
  userskill:[SkillInput]
  wantedskill:[SkillInput]
}

type Skill{
  id: ID!
  name: String!
  proficiency: String
  description: String
  pic: String
}

type Review{
  id: ID!
  from: User
  to: User
  content: String!
  rating: Int
  skillName: String
}

## Queries ##
type Query {
  getUserProfile: User
  getAllUsers: [User]
  getAllSkills: [Skill]
  getSkill(id: ID!): Skill
  usersBySkill(skillId: Int!): [User]

}

## Mutations ##
type Mutation {
  #USV Related  
  register(username: String!, password: String!,gender:String!,profile:UserProfileInput): User
  login(username: String!, password: String!): User
  editProfile(username: String!, newusername: String,password: String,gender:String,profile:UserProfileInput): User
  
  #deregisterUser(email: String!): ID
}
