scalar DateTime

type User {
  id: Int!
  username: String!
  password: String!
  gender: String
  email: String
  profile: UserProfile
  suc_match: Int
  invite_sent: [User]
  invite_rec: [User]
  rating: Int
  review: [Review]
  chats:[Chat]
}

type Chat {
  id: Int!
  messages:[Message]
  participants: [User]
}

type Message {
  id: ID!
  content: String
  timestamp: DateTime
  sender: ID
}

type UserProfile {
  age: Int
  location: String
  avatar: String
  postal:Int
  skills: [UserSkill]
  wanted_skills: [Int]
}

type UserSkill {
  skill_id: Int
  level: String
}

input UserProfileInput {
  age: Int
  location: String
  avatar: String
  postal:Int
  skills:[UserSkillInput] 
  wanted_skills: [Int]    
}

input UserSkillInput {
  skill_id: Int           
  level: String
}

type Skill {
  id: ID!
  name: String!
  proficiency: String
  description: String
  pic: String
}

type Review {
  id: ID!
  from: User
  to: User
  content: String!
  rating: Int
  skillName: String
}

## Queries ##
type Query {
  getUserProfile: User
  getAllUsers: [User]
  getUserById(id: Int!): User
  getAllSkills: [Skill]
  getSkill(id: ID!): Skill
  usersBySkill(skillId: Int!): [User]
  
  getChat(chatId: ID!): Chat
  getUserChats(userId: ID!): [Chat]
  getChatMessages(chatId: ID!): [Message]
}

## Mutations ##
type Mutation {
  #USV Related  
  register(username: String!, password: String!, gender: String!, profile: UserProfileInput): User
  login(username: String!, password: String!): User
  editProfile(username: String!, newusername: String, password: String, gender: String, profile: UserProfileInput): User
  
  #deregisterUser(email: String!): Int


  createChat(participants: Int!): Chat
  sendMessage(chatId: ID!, content: String!, sender: ID!): Message
  deleteMessage(messageId: ID!): ID
}
